//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import Foundation

/// Generates the markdown file with extended documenation on the available rules.
final class RuleDocumentationGenerator: FileGenerator {

  /// The rules collected by scanning the formatter source code.
  let ruleCollector: RuleCollector

  /// Creates a new rule registry generator.
  init(ruleCollector: RuleCollector) {
    self.ruleCollector = ruleCollector
  }

  func write(into handle: FileHandle) throws {
    handle.write(
      """
      <!-- This file is autogenerated with `generate-pipeline` utility of
      `swift-format`. DO NOT EDIT MANUALLY! -->

      # `swift-format` Lint and Format Rules

      Use the rules below in the `rules` block of your `.swift-format`
      configuration file, as described in
      [Configuration](Documentation/Configuration.md). All of these rules can be
      applied in the linter, but only some of them can format your source code
      automatically.


      """
    )

    for detectedRule in ruleCollector.allLinters.sorted(by: { $0.typeName < $1.typeName }) {
      handle.write("""

      ### \(detectedRule.typeName)

      \(ruleDescription(for: detectedRule))

      \(ruleFormatSupportDescription(for: detectedRule))

      """)
    }
  }

  private func ruleFormatSupportDescription(for rule: RuleCollector.DetectedRule) -> String {
    return rule.canFormat ?
      "`\(rule.typeName)` rule can format your code automatically." :
      "`\(rule.typeName)` is a linter-only rule."
  }

  /// Takes the DocC comment of the rule and strip `///` from the beginning of each line.
  /// Also removes empty lines with under 4 characters.
  private func ruleDescription(for rule: RuleCollector.DetectedRule) -> String {
    let described = rule.doccComment.split(whereSeparator: \.isNewline)
      .compactMap { line in
        // Remove the first 4 characters, i.e. `/// `
        if line.count >= 4 {
          let index = line.index(line.startIndex, offsetBy: 4)
          return line.suffix(from: index)
        } else {
          // For lines that have less than 4 characters, emit an empty line.
          return ""
        }
      }
      // not great, but that shoves multiple lines into the single
      // table cell in markdown
      .joined(separator: "\n")

    return described
  }
}
